FindClusters(resolution=0.8)
# Chunk 24
DimPlot(MI_integrated,
reduction = "umap",
label = TRUE,
split.by = "sample")
# Chunk 25
DimPlot(MI_integrated,
reduction = "umap",
split.by = "Phase") + NoLegend()
# Chunk 27
print(MI_integrated[["pca"]], dims = 1:5, nfeatures = 5)
# Chunk 28
# Select the RNA counts slot to be the default assay
DefaultAssay(MI_integrated) <- "RNA"
# Normalize RNA data for visualization purposes
MI_integrated <- NormalizeData(MI_integrated, verbose = FALSE)
# Chunk 29
##CD31 and CD102 (gene Pecam1, Icam2)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Pecam1","Icam2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 30
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Cxcl12","Eln","Fbln5","Postn","Vcan"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Col1a2","Col3a1","Fbln2","Sparc" ),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 31
#Hemoglobin (gene Hbb, Hba)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Hbb-bs", "Hba-a1", "Hba-a2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 32
#CD45, LYZ (gene Ptprc LyzM)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Ptprc", "Lyz2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 33
#Cd11b (Itgam);
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Cd14","Ly6c2", "Itgam","Adgre1"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
VlnPlot(MI_integrated,
features = c("Il1b","Ly6c2","Adgre1"))
# Chunk 34
#Ccr2 as infiltrating macrophage marker
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("F13a1","Pf4","Ccr2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 35
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Cd74","H2-Eb1"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 36
# Create function to get conserved markers for any given cluster
load("../data/gene_annotations_mouse.rdata")
get_conserved <- function(cluster){
FindConservedMarkers(MI_integrated,
ident.1 = cluster,
grouping.var = "sample",
only.pos = TRUE) %>%
rownames_to_column(var = "gene") %>%
left_join(y = unique(annotations[, c("gene_name", "description")]),
by = c("gene" = "gene_name")) %>%
mutate(cluster_id = cluster)
}
conserved_markers <- map_dfr(c(0:6), get_conserved)
# Extract top 10 markers per cluster
top10 <- conserved_markers %>%
mutate(avg_fc = (WT_MI_avg_logFC + KO_MI_avg_logFC) /2) %>%
group_by(cluster_id) %>%
top_n(n = 10,
wt = avg_fc)
top10
# Chunk 37
top10_filter <- top10 %>%
filter(KO_MI_pct.1>0.3) %>%
select(1,14,15,4,5,9,10)
top10_filter
# Chunk 38
MI_integrated <- RenameIdents(object = MI_integrated,
"0"="Dendritic cells/Monocytes",
"1"="Erythrocytes",
"2"="Resident macrophages",
"3"="Inflammatory macrophages",
"4"="Granulocytes",
"5"="Endothelial cells/Mesenchymal cells",
"6"="M2-polarized macrophages")
DimPlot(object = MI_integrated,
reduction = "umap",
label = T,
label.size = 3,
repel = T)
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
library(prettydoc)
library(dplyr)
library(Seurat)
library(Matrix)
library(tidyverse)
# theme: readable
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
library(prettydoc)
library(dplyr)
library(Seurat)
library(Matrix)
library(tidyverse)
# theme: readable
WT_SHAM.data <- Read10X(data.dir = "../raw/WT-SHAM/")
WT_SHAM <- CreateSeuratObject(counts=WT_SHAM.data,project = "Heart2019",
min.cells = 3,min.features = 200)
WT_MI.data <- Read10X(data.dir="../raw/WT-MI/")
WT_MI <- CreateSeuratObject(counts=WT_MI.data,project = "Heart2019",
min.cells = 3,min.features = 200)
KO_SHAM.data <- Read10X(data.dir="../raw/KO-SHAM/")
KO_SHAM <- CreateSeuratObject(counts=KO_SHAM.data,project = "Heart2019",
min.cells = 3,min.features = 200)
KO_MI.data <- Read10X(data.dir = "../raw/KO-MI/")
KO_MI <- CreateSeuratObject(counts=KO_MI.data,project = "Heart2019",
min.cells = 3,min.features = 200)
setwd("C:/Temple/scRNA/sc_2019/Analysis")
WT_SHAM.data <- Read10X(data.dir = "../raw/WT-SHAM/")
WT_SHAM <- CreateSeuratObject(counts=WT_SHAM.data,project = "Heart2019",
min.cells = 3,min.features = 200)
WT_MI.data <- Read10X(data.dir="../raw/WT-MI/")
WT_MI <- CreateSeuratObject(counts=WT_MI.data,project = "Heart2019",
min.cells = 3,min.features = 200)
KO_SHAM.data <- Read10X(data.dir="../raw/KO-SHAM/")
KO_SHAM <- CreateSeuratObject(counts=KO_SHAM.data,project = "Heart2019",
min.cells = 3,min.features = 200)
KO_MI.data <- Read10X(data.dir = "../raw/KO-MI/")
KO_MI <- CreateSeuratObject(counts=KO_MI.data,project = "Heart2019",
min.cells = 3,min.features = 200)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
library(prettydoc)
library(dplyr)
library(Seurat)
library(Matrix)
library(tidyverse)
# theme: readable
# Chunk 2
WT_SHAM.data <- Read10X(data.dir = "../raw/WT-SHAM/")
WT_SHAM <- CreateSeuratObject(counts=WT_SHAM.data,project = "Heart2019",
min.cells = 3,min.features = 200)
WT_MI.data <- Read10X(data.dir="../raw/WT-MI/")
WT_MI <- CreateSeuratObject(counts=WT_MI.data,project = "Heart2019",
min.cells = 3,min.features = 200)
KO_SHAM.data <- Read10X(data.dir="../raw/KO-SHAM/")
KO_SHAM <- CreateSeuratObject(counts=KO_SHAM.data,project = "Heart2019",
min.cells = 3,min.features = 200)
KO_MI.data <- Read10X(data.dir = "../raw/KO-MI/")
KO_MI <- CreateSeuratObject(counts=KO_MI.data,project = "Heart2019",
min.cells = 3,min.features = 200)
# Chunk 3
#adding column to metadata
WT_SHAM$sample <- sample("WT_SHAM", size = ncol(WT_SHAM), replace = TRUE)
WT_MI$sample <- sample("WT_MI", size = ncol(WT_MI), replace = TRUE)
KO_MI$sample <- sample("KO_MI", size=ncol(KO_MI),replace = TRUE)
KO_SHAM$sample <- sample("KO_SHAM", size = ncol(KO_SHAM),replace=TRUE)
##merged datasets to a single Seurat object
merged_MI_all <- merge(x=WT_SHAM, y=c(WT_MI, KO_SHAM, KO_MI),
add.cell.id = c("WT_SHAM", "WT_MI", "KO_SHAM","KO_MI"))
##extract metadata from the object
metadata_all <- merged_MI_all@meta.data
##Visualize cell count for each sample
metadata_all %>%
ggplot(aes(x=sample, fill=sample)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust=0.5, face="bold")) +
ggtitle("NCells")
# Chunk 4
head(metadata_all[metadata_all$sample=="WT_MI",])
# Chunk 6
load("../data/merged_MI.Rdata")
#only contains WT_MI, KO_MI
metadata <- merged_MI@meta.data
head(metadata)
# Chunk 7
metadata %>%
ggplot(aes(x=sample, fill=sample)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust=0.5, face="bold")) +
ggtitle("NCells")
# Chunk 8
metadata %>%
ggplot(aes(color=sample, x=nUMI, fill= sample)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
ylab("Cell density") +
geom_vline(xintercept = 500)
# Chunk 9
metadata %>%
ggplot(aes(color=sample, x=nGene, fill= sample)) +
geom_density(alpha = 0.2) +
theme_classic() +
scale_x_log10() +
geom_vline(xintercept = 300)
# Chunk 10
metadata %>%
ggplot(aes(color=sample, x=mitoRatio, fill=sample)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)
# Chunk 11
metadata %>%
ggplot(aes(x=nUMI, y=nGene, color=mitoRatio)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
stat_smooth(method=lm) +
scale_x_log10() +
scale_y_log10() +
theme_classic() +
geom_vline(xintercept = 500) +
geom_hline(yintercept = 250) +
facet_wrap(~sample)
# Chunk 12
metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = sample, fill=sample)) +
geom_density(alpha = 0.2) +
theme_classic() +
geom_vline(xintercept = 0.8)
# Chunk 14
load("../data/merged_MI_phase.rdata")
DimPlot(merged_MI_phase,
reduction = "pca",
group.by = "Phase",
split.by = "Phase")
# Chunk 17
load("../data/merged_MI_no_integ.rdata")
DimPlot(merged_MI_no_integ,
reduction = "umap", group.by = "sample")
# Chunk 20
load("../results/integrated_MI.rdata")
PCAPlot(MI_integrated,
split.by="sample")
# Chunk 21
DimPlot(MI_integrated,
reduction = "umap",
group.by = "sample")
# Chunk 22
ElbowPlot(object = MI_integrated, ndims = 40)
# Chunk 23
MI_integrated <- FindNeighbors(object = MI_integrated,
dims = 1:30) %>%
FindClusters(resolution=0.8)
# Chunk 24
DimPlot(MI_integrated,
reduction = "umap",
label = TRUE,
split.by = "sample")
# Chunk 25
DimPlot(MI_integrated,
reduction = "umap",
split.by = "Phase") + NoLegend()
# Chunk 27
print(MI_integrated[["pca"]], dims = 1:5, nfeatures = 5)
# Chunk 28
# Select the RNA counts slot to be the default assay
DefaultAssay(MI_integrated) <- "RNA"
# Normalize RNA data for visualization purposes
MI_integrated <- NormalizeData(MI_integrated, verbose = FALSE)
# Chunk 29
##CD31 and CD102 (gene Pecam1, Icam2)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Pecam1","Icam2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 30
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Cxcl12","Eln","Fbln5","Postn","Vcan"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Col1a2","Col3a1","Fbln2","Sparc" ),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 31
#Hemoglobin (gene Hbb, Hba)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Hbb-bs", "Hba-a1", "Hba-a2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 32
#CD45, LYZ (gene Ptprc LyzM)
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Ptprc", "Lyz2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 33
#Cd11b (Itgam);
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Cd14","Ly6c2", "Itgam","Adgre1"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
VlnPlot(MI_integrated,
features = c("Il1b","Ly6c2","Adgre1"))
# Chunk 34
#Ccr2 as infiltrating macrophage marker
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("F13a1","Pf4","Ccr2"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 35
FeaturePlot(MI_integrated,
reduction = "umap",
features = c("Cd74","H2-Eb1"),
sort.cell = TRUE,
min.cutoff = 'q10',
label = TRUE)
# Chunk 36
# Create function to get conserved markers for any given cluster
load("../data/gene_annotations_mouse.rdata")
get_conserved <- function(cluster){
FindConservedMarkers(MI_integrated,
ident.1 = cluster,
grouping.var = "sample",
only.pos = TRUE) %>%
rownames_to_column(var = "gene") %>%
left_join(y = unique(annotations[, c("gene_name", "description")]),
by = c("gene" = "gene_name")) %>%
mutate(cluster_id = cluster)
}
conserved_markers <- map_dfr(c(0:6), get_conserved)
# Extract top 10 markers per cluster
top10 <- conserved_markers %>%
mutate(avg_fc = (WT_MI_avg_logFC + KO_MI_avg_logFC) /2) %>%
group_by(cluster_id) %>%
top_n(n = 10,
wt = avg_fc)
top10
# Chunk 37
top10_filter <- top10 %>%
filter(KO_MI_pct.1>0.3) %>%
select(1,14,15,4,5,9,10)
top10_filter
# Chunk 38
MI_integrated <- RenameIdents(object = MI_integrated,
"0"="Dendritic cells/Monocytes",
"1"="Erythrocytes",
"2"="Resident macrophages",
"3"="Inflammatory macrophages",
"4"="Granulocytes",
"5"="Endothelial cells/Mesenchymal cells",
"6"="M2-polarized macrophages")
DimPlot(object = MI_integrated,
reduction = "umap",
label = T,
label.size = 3,
repel = T)
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(.,"%")) %>%
ungroup() %>%
pivot_longer(cols = c(n, percentage), names_to = "cell_count") %>%
pivot_wider(names_from = ident, values_from = value) %>%
n_cells
FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup()
FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(.,"%"))
FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) )
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage,"%")) %>%
pivot_longer(cols = c(n, percentage), names_to = "cell_count") %>%
pivot_wider(names_from = ident, values_from = value) %>%
n_cells
FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage,"%"))
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage,"%")) %>%
pivot_longer(cols = c(n, percentage), names_to = "cell_count") %>%
pivot_wider(names_from = ident, values_from = value)
FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage,"%"))
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage,"%"),
n = as.character(n)) %>%
pivot_longer(cols = c(n, percentage), names_to = "cell_count") %>%
pivot_wider(names_from = ident, values_from = value)
n_cells
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage," %"),
n = as.character(n)) %>%
pivot_longer(cols = c(n, percentage), names_to = "cell_count") %>%
pivot_wider(names_from = ident, values_from = value)
# Extract identity and sample information from seurat object to determine the number of cells per cluster per sample
n_cells <- FetchData(MI_integrated,
vars = c("ident", "sample")) %>%
dplyr::count(ident, sample) %>%
group_by(sample) %>%
mutate(percentage=  n/sum(n)*100)  %>%
ungroup() %>%
mutate_if(is.numeric,~round(.x,0) ) %>%
mutate(percentage = paste0(percentage," %"),
n = as.character(n)) %>%
pivot_longer(cols = c(n, percentage), names_to = "cell_count") %>%
pivot_wider(names_from = ident, values_from = value)
n_cells
kable(n_cells)
library(kable)
install.packages("kabel")
install.packages("kable")
library(kable)
VlnPlot(MI_integrated,
features = c("Saa3","Arg1","Folr2"))
